import os
import logging
import gspread
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from oauth2client.service_account import ServiceAccountCredentials

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv("API_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
MANAGER_ID = 7279978383
CHANNEL_USERNAME = "@capital_pay"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

# Google Sheets
def init_sheet():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name("/etc/secrets/credentials.json", scope)
    client = gspread.authorize(creds)
    sheet = client.open("CapitalPay Leads").sheet1
    return sheet

sheet = init_sheet()

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
class PartnerForm(StatesGroup):
    country = State()
    methods = State()
    geo = State()
    volume = State()
    contact = State()

# –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
def manager_keyboard():
    return types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"tg://user?id={MANAGER_ID}")
    )

def back_or_manager():
    return types.InlineKeyboardMarkup(row_width=2).add(
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"),
        types.InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"tg://user?id={MANAGER_ID}")
    )

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    source = message.get_args()
    if source:
        sheet.append_row([f"–¢—Ä–∞—Ñ–∏–∫ –∏–∑: {source}"])
    keyboard = types.InlineKeyboardMarkup(row_width=1).add(
        types.InlineKeyboardButton("ü§ù –°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º", callback_data="connect"),
        types.InlineKeyboardButton("üë®‚Äçüíº –Ø —Ç–∏–º–ª–∏–¥ ü§ó", callback_data="teamlead"),
        types.InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"tg://user?id={MANAGER_ID}")
    )
    banner = types.InputFile("banner.jpg")
    caption = (
        "<b>CapitalPay</b>\n\n"
        "üíº –°–¥–µ–ª–∫–∏ –≤ HighRisk\n"
        "üìä –£—á—ë—Ç, –≤—ã–ø–ª–∞—Ç—ã, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
        "üìö –õ–∏—á–Ω—ã–π –∫—É—Ä–∞—Ç–æ—Ä\n"
        "üí∞ –£—Å–ª–æ–≤–∏—è –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n\n"
        "‚öôÔ∏è –î–µ–ø–æ–∑–∏—Ç ‚Äî –æ—Ç $500\n"
        "üìâ –í—Ö–æ–¥ ‚Äî 8%, –≤—ã—Ö–æ–¥ ‚Äî 2,5%\n"
        "üîÑ –°—Ç–∞–≤–∫–∞ –≤ –∫—Ä—É–≥ ‚Äî 10,5%\n\n"
        "üöÄ 3 –¥–Ω—è –±–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–∞\n"
        "üìÜ –ù–∞ —Ä—ã–Ω–∫–µ —Å 2020\n"
        "üì© @lexcapitalpay"
    )
    await bot.send_photo(message.chat.id, photo=banner, caption=caption, reply_markup=keyboard)

# –¢–∏–º–ª–∏–¥ –∏–Ω—Ñ–æ
@dp.callback_query_handler(lambda c: c.data == "teamlead")
async def teamlead_info(callback_query: types.CallbackQuery):
    text = (
        "ü§ù <b>6 –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ CapitalPay –¥–ª—è —Ç–∏–º–ª–∏–¥–æ–≤</b>\n\n"
        "1. –í—ã—Å–æ–∫–∞—è –∞–≥–µ–Ω—Ç—Å–∫–∞—è —Ä–µ—Ñ–∫–∞\n"
        "2. –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n"
        "3. –¢–µ—Å—Ç –±–µ–∑ —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –¥–µ–ø–∞\n"
        "4. –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
        "5. –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ –∑–∞–∫—Ä—ã—Ç—ã–º –ø–ª–æ—â–∞–¥–∫–∞–º\n"
        "6. –ó–∞–ª–∏–≤–∞–µ–º –¥–æ 100–∫–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞\n\n"
        "–•–æ—á–µ—à—å —É—Å–ª–æ–≤–∏—è –∏ —Å–ø–∏—Å–æ–∫ –ø–ª–æ—â–∞–¥–æ–∫? –ñ–º–∏ –∫–Ω–æ–ø–∫—É üëáüèº"
    )
    await bot.send_message(callback_query.from_user.id, text, reply_markup=back_or_manager())

@dp.callback_query_handler(lambda c: c.data == "back")
async def back_to_menu(callback_query: types.CallbackQuery):
    await start(callback_query.message)

# –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –≤ –∫–∞–Ω–∞–ª
@dp.message_handler(commands=["publish"])
async def post_button(message: types.Message):
    keyboard = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", url="https://t.me/CapitalPay_bot?start=from_channel")
    )
    text = "üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ CapitalPay –∫–∞–∫ –ø–∞—Ä—Ç–Ω—ë—Ä –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞"
    await bot.send_message(chat_id=CHANNEL_USERNAME, text=text, reply_markup=keyboard)

# –í–æ—Ä–æ–Ω–∫–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞
@dp.callback_query_handler(lambda c: c.data == "connect")
async def form_start(callback_query: types.CallbackQuery):
    await callback_query.message.answer("1. –ò–∑ –∫–∞–∫–æ–π –≤—ã —Å—Ç—Ä–∞–Ω—ã?", reply_markup=back_or_manager())
    await PartnerForm.country.set()

@dp.message_handler(state=PartnerForm.country)
async def form_country(message: types.Message, state: FSMContext):
    await state.update_data(country=message.text)
    await message.answer("2. –ö–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏—ë–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã?", reply_markup=back_or_manager())
    await PartnerForm.methods.set()

@dp.message_handler(state=PartnerForm.methods)
async def form_methods(message: types.Message, state: FSMContext):
    await state.update_data(methods=message.text)
    await message.answer("3. –ù–∞ –∫–∞–∫–æ–º –≥–µ–æ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?", reply_markup=back_or_manager())
    await PartnerForm.geo.set()

@dp.message_handler(state=PartnerForm.geo)
async def form_geo(message: types.Message, state: FSMContext):
    await state.update_data(geo=message.text)
    await message.answer("4. –ö–∞–∫–æ–π –æ–±—ä—ë–º –≤ –¥–µ–Ω—å –≥–æ—Ç–æ–≤—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å (USD)?", reply_markup=back_or_manager())
    await PartnerForm.volume.set()

@dp.message_handler(state=PartnerForm.volume)
async def form_volume(message: types.Message, state: FSMContext):
    await state.update_data(volume=message.text)
    await message.answer("5. –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (Telegram –∏–ª–∏ Email):", reply_markup=back_or_manager())
    await PartnerForm.contact.set()

@dp.message_handler(state=PartnerForm.contact)
async def form_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    data = await state.get_data()
    sheet.append_row([
        message.from_user.id,
        data['country'],
        data['methods'],
        data['geo'],
        data['volume'],
        data['contact']
    ])
    await bot.send_message(CHANNEL_ID, f"""
<b>–ù–æ–≤–∞—è –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –∑–∞—è–≤–∫–∞</b>:
–°—Ç—Ä–∞–Ω–∞: {data['country']}
–ú–µ—Ç–æ–¥—ã: {data['methods']}
–ì–µ–æ: {data['geo']}
–û–±—ä—ë–º: {data['volume']}
–ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}
""")
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É.")
    await message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –ø–∞—Ä—Ç–Ω—ë—Ä CapitalPay.")
    await state.finish()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
