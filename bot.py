import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

API_TOKEN = os.getenv("API_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

class PartnerForm(StatesGroup):
    country = State()
    methods = State()
    geo = State()
    volume = State()
    contact = State()

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(row_width=1).add(
        types.InlineKeyboardButton("ü§ù –°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º", callback_data="connect"),
        types.InlineKeyboardButton("üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä", url="https://t.me/lexcapitalpay")
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ú—ã –∏—â–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –≤ –≥–µ–º–±–ª–∏–Ω–≥/–±–µ—Ç—Ç–∏–Ω–≥. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'connect')
async def connect(callback_query: types.CallbackQuery):
    await callback_query.message.answer("1. –ò–∑ –∫–∞–∫–æ–π –≤—ã —Å—Ç—Ä–∞–Ω—ã?")
    await PartnerForm.country.set()
    await callback_query.answer()

@dp.message_handler(state=PartnerForm.country)
async def process_country(message: types.Message, state: FSMContext):
    await state.update_data(country=message.text)
    await message.answer("2. –ö–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏—ë–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã? (–Ω–∞–ø—Ä–∏–º–µ—Ä: C2C, crypto, APM)")
    await PartnerForm.next()

@dp.message_handler(state=PartnerForm.methods)
async def process_methods(message: types.Message, state: FSMContext):
    await state.update_data(methods=message.text)
    await message.answer("3. –ù–∞ –∫–∞–∫–∏–µ –≥–µ–æ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?")
    await PartnerForm.next()

@dp.message_handler(state=PartnerForm.geo)
async def process_geo(message: types.Message, state: FSMContext):
    await state.update_data(geo=message.text)
    await message.answer("4. –ö–∞–∫–æ–π –æ–±—ä—ë–º –≤ –¥–µ–Ω—å –≥–æ—Ç–æ–≤—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å (USD)?")
    await PartnerForm.next()

@dp.message_handler(state=PartnerForm.volume)
async def process_volume(message: types.Message, state: FSMContext):
    await state.update_data(volume=message.text)
    await message.answer("5. –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (Telegram –∏–ª–∏ Email):")
    await PartnerForm.next()

@dp.message_handler(state=PartnerForm.contact)
async def process_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    data = await state.get_data()

    summary = (
        f"**–ù–æ–≤–∞—è –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –∑–∞—è–≤–∫–∞**\n"
        f"–°—Ç—Ä–∞–Ω–∞: {data['country']}\n"
        f"–ú–µ—Ç–æ–¥—ã: {data['methods']}\n"
        f"–ì–µ–æ: {data['geo']}\n"
        f"–û–±—ä–µ–º/–¥–µ–Ω—å: {data['volume']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}"
    )

    await bot.send_message(chat_id=CHANNEL_ID, text=summary, parse_mode="Markdown")
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)