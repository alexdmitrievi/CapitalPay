import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext

API_TOKEN = os.getenv("API_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
MANAGER_ID = 7279978383

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

class PartnerForm(StatesGroup):
    country = State()
    methods = State()
    geo = State()
    volume = State()
    contact = State()

back_button = types.InlineKeyboardMarkup().add(
    types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")
)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(row_width=1).add(
        types.InlineKeyboardButton("ü§ù –°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º", callback_data="connect"),
        types.InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"tg://user?id={MANAGER_ID}"),
        types.InlineKeyboardButton("üë®‚Äçüíº –Ø —Ç–∏–º–ª–∏–¥ ü§ó", callback_data="teamlead"),
    )

    banner = types.InputFile("–ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã.jpg")

    await bot.send_photo(chat_id=message.chat.id, photo=banner)

    intro_text = """
CapitalPay
üíº –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ –≤ HighRisk
üìä –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ—Ñ—Ç –¥–ª—è —É—á—ë—Ç–∞, –≤—ã–ø–ª–∞—Ç –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
üìö –£—á–µ–±–Ω—ã–π —Ü–µ–Ω—Ç—Ä —Å –ª–∏—á–Ω—ã–º –∫—É—Ä–∞—Ç–æ—Ä–æ–º
üí∞ –í—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥

‚öôÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç ‚Äî 500$
üìâ –í—Ö–æ–¥ ‚Äî 8%, –≤—ã—Ö–æ–¥ ‚Äî 2,5%
üîÑ –°—Ç–∞–≤–∫–∞ –≤ –∫—Ä—É–≥ ‚Äî 10,5%

üöÄ 3 –¥–Ω—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
üìÜ –ù–∞ —Ä—ã–Ω–∫–µ —Å 2020 –≥–æ–¥–∞

üì© –°–≤—è–∑—å: @lexcapitalpay
"""
    await message.answer(intro_text, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "connect")
async def start_form(callback_query: types.CallbackQuery):
    await callback_query.message.answer("1. –ò–∑ –∫–∞–∫–æ–π –≤—ã —Å—Ç—Ä–∞–Ω—ã?", reply_markup=back_button)
    await PartnerForm.country.set()
    await callback_query.answer()

@dp.message_handler(state=PartnerForm.country)
async def form_country(message: types.Message, state: FSMContext):
    await state.update_data(country=message.text)
    await message.answer("2. –ö–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏—ë–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã? (–°2–°, –°–ë–ü, crypto –∏ —Ç.–¥.)", reply_markup=back_button)
    await PartnerForm.methods.set()

@dp.message_handler(state=PartnerForm.methods)
async def form_methods(message: types.Message, state: FSMContext):
    await state.update_data(methods=message.text)
    await message.answer("3. –ü–æ –∫–∞–∫–∏–º –≥–µ–æ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?", reply_markup=back_button)
    await PartnerForm.geo.set()

@dp.message_handler(state=PartnerForm.geo)
async def form_geo(message: types.Message, state: FSMContext):
    await state.update_data(geo=message.text)
    await message.answer("4. –ö–∞–∫–æ–π –æ–±—ä—ë–º –≤ –¥–µ–Ω—å –≥–æ—Ç–æ–≤—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å (USD)?", reply_markup=back_button)
    await PartnerForm.volume.set()

@dp.message_handler(state=PartnerForm.volume)
async def form_volume(message: types.Message, state: FSMContext):
    await state.update_data(volume=message.text)
    await message.answer("5. –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (Telegram –∏–ª–∏ Email):", reply_markup=back_button)
    await PartnerForm.contact.set()

@dp.message_handler(state=PartnerForm.contact)
async def form_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    data = await state.get_data()
    summary = f"""
–ù–æ–≤–∞—è –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –∑–∞—è–≤–∫–∞:
–°—Ç—Ä–∞–Ω–∞: {data['country']}
–ú–µ—Ç–æ–¥—ã: {data['methods']}
–ì–µ–æ: {data['geo']}
–û–±—ä—ë–º: {data['volume']}
–ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}
"""
    await bot.send_message(chat_id=CHANNEL_ID, text=summary)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É.")
    await message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –ø–∞—Ä—Ç–Ω—ë—Ä CapitalPay. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "teamlead")
async def teamlead_info(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"tg://user?id={MANAGER_ID}"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    )
    text = """
ü§ù 6 –Ω–∞—à–∏—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–∏–º–ª–∏–¥–∞–º–∏:

1. –í—ã—Å–æ–∫–∞—è –∞–≥–µ–Ω—Ç—Å–∫–∞—è —Ä–µ—Ñ–∫–∞;
2. –í—ã–≤–æ–¥–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è;
3. –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–∞ –±–µ–∑ —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –¥–µ–ø–∞;
4. –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –≤—Å–µ–º –≤–∞—à–∏–º —Ç—Ä–µ–π–¥–µ—Ä–∞–º;
5. –ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ –∫ –∑–∞–∫—Ä—ã—Ç—ã–º –ø–ª–æ—â–∞–¥–∫–∞–º —á–µ—Ä–µ–∑ –Ω–∞—Å;
6. –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π –æ–±—ä–µ–º –±–æ–ª–µ–µ 100–∫–∫, —Ç–∞–∫ —á—Ç–æ –∑–∞–ª—å–µ–º –≤ –ª–∏–º–∏—Ç—ã –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 1 —á–∞—Å.

–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —É—Å–ª–æ–≤–∏—è –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–ª–æ—â–∞–¥–æ–∫, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüëáüèº
"""
    await callback_query.message.answer(text, reply_markup=keyboard)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "back_to_menu")
async def back_to_menu(callback_query: types.CallbackQuery):
    await start(callback_query.message)
    await callback_query.answer()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
