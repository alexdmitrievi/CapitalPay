import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

API_TOKEN = os.getenv("API_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
MANAGER_ID = 7279978383

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º—ã
class PartnerForm(StatesGroup):
    country = State()
    methods = State()
    geo = State()
    volume = State()
    contact = State()

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
back_button = types.InlineKeyboardMarkup().add(
    types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(row_width=1).add(
        types.InlineKeyboardButton("ü§ù –°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º", callback_data="connect"),
        types.InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"tg://user?id={MANAGER_ID}"),
        types.InlineKeyboardButton("üë®‚Äçüíº –Ø —Ç–∏–º–ª–∏–¥ ü§ó", callback_data="teamlead")
    )
    banner = types.InputFile("banner.jpg")
    caption = (
        "<b>CapitalPay</b> ‚Äî –ø–ª–∞—Ç—ë–∂–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è HighRisk\n\n"
        "üìä –£—á—ë—Ç, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –≤—ã–ø–ª–∞—Ç—ã\n"
        "üöÄ –ë–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–∞ ‚Äî 3 –¥–Ω—è —Ç–µ—Å—Ç–∞\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëáüèº"
    )
    await bot.send_photo(chat_id=message.chat.id, photo=banner, caption=caption, parse_mode='HTML', reply_markup=keyboard)

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–∑ –º–µ–Ω—é
@dp.message_handler(lambda message: message.text == "üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å")
async def restart_from_menu(message: types.Message):
    await start(message)

# Callback "–Ø —Ç–∏–º–ª–∏–¥ ü§ó"
@dp.callback_query_handler(lambda c: c.data == "teamlead")
async def teamlead_info(callback_query: types.CallbackQuery):
    msg = (
        "ü§ù <b>6 –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ CapitalPay –¥–ª—è —Ç–∏–º–ª–∏–¥–æ–≤</b>\n\n"
        "1. –í—ã—Å–æ–∫–∞—è –∞–≥–µ–Ω—Ç—Å–∫–∞—è —Ä–µ—Ñ–∫–∞\n"
        "2. –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n"
        "3. –¢–µ—Å—Ç –±–µ–∑ —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –¥–µ–ø–∞\n"
        "4. –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
        "5. –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ –∑–∞–∫—Ä—ã—Ç—ã–º –ø–ª–æ—â–∞–¥–∫–∞–º\n"
        "6. –ó–∞–ª–∏–≤–∞–µ–º –¥–æ 100–∫–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞\n\n"
        "–•–æ—á–µ—à—å —É—Å–ª–æ–≤–∏—è –∏ —Å–ø–∏—Å–æ–∫ –ø–ª–æ—â–∞–¥–æ–∫? –ñ–º–∏ –∫–Ω–æ–ø–∫—Éüëáüèº"
    )
    keyboard = types.InlineKeyboardMarkup(row_width=1).add(
        types.InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"tg://user?id={MANAGER_ID}"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")
    )
    await bot.edit_message_text(
        msg, callback_query.from_user.id, callback_query.message.message_id,
        parse_mode='HTML', reply_markup=keyboard
    )

# Callback "–ù–∞–∑–∞–¥"
@dp.callback_query_handler(lambda c: c.data == "back")
async def back_to_menu(callback_query: types.CallbackQuery):
    await start(callback_query.message)

# –•–µ–Ω–¥–ª–µ—Ä—ã —Ñ–æ—Ä–º—ã
@dp.callback_query_handler(lambda c: c.data == "connect")
async def form_start(callback_query: types.CallbackQuery):
    await PartnerForm.country.set()
    await callback_query.message.answer("1. –ò–∑ –∫–∞–∫–æ–π –≤—ã —Å—Ç—Ä–∞–Ω—ã?", reply_markup=back_button)
    await callback_query.answer()

@dp.message_handler(state=PartnerForm.country)
async def form_country(message: types.Message, state: FSMContext):
    await state.update_data(country=message.text)
    await message.answer("2. –ö–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏—ë–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã? (C2C, –°–ë–ü, crypto –∏ —Ç.–¥.)", reply_markup=back_button)
    await PartnerForm.methods.set()

@dp.message_handler(state=PartnerForm.methods)
async def form_methods(message: types.Message, state: FSMContext):
    await state.update_data(methods=message.text)
    await message.answer("3. –ù–∞ –∫–∞–∫–∏–µ –≥–µ–æ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?", reply_markup=back_button)
    await PartnerForm.geo.set()

@dp.message_handler(state=PartnerForm.geo)
async def form_geo(message: types.Message, state: FSMContext):
    await state.update_data(geo=message.text)
    await message.answer("4. –ö–∞–∫–æ–π –æ–±—ä—ë–º –≤ –¥–µ–Ω—å –≥–æ—Ç–æ–≤—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å (USD)?", reply_markup=back_button)
    await PartnerForm.volume.set()

@dp.message_handler(state=PartnerForm.volume)
async def form_volume(message: types.Message, state: FSMContext):
    await state.update_data(volume=message.text)
    await message.answer("5. –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (Telegram –∏–ª–∏ Email):", reply_markup=back_button)
    await PartnerForm.contact.set()

@dp.message_handler(state=PartnerForm.contact)
async def form_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    data = await state.get_data()
    summary = (
        "üì• <b>–ù–æ–≤–∞—è –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –∑–∞—è–≤–∫–∞</b>\n\n"
        f"üåç –°—Ç—Ä–∞–Ω–∞: <b>{data['country']}</b>\n"
        f"üí≥ –ú–µ—Ç–æ–¥—ã: <b>{data['methods']}</b>\n"
        f"üìç –ì–µ–æ: <b>{data['geo']}</b>\n"
        f"üìà –û–±—ä—ë–º: <b>{data['volume']}</b>\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: <b>{data['contact']}</b>"
    )
    await bot.send_message(chat_id=CHANNEL_ID, text=summary, parse_mode='HTML')
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É.")
    await message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –ø–∞—Ä—Ç–Ω—ë—Ä CapitalPay. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    await state.finish()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram menu (–ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª)
async def set_commands(bot: Bot):
    await bot.set_my_commands([
        types.BotCommand("start", "üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å")
    ])

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True, on_startup=set_commands)
