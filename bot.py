import os
import logging
import gspread
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from oauth2client.service_account import ServiceAccountCredentials

API_TOKEN = os.getenv("API_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
CHANNEL_USERNAME = "@capital_pay"
MANAGER_ID = 7279978383
BOT_USERNAME = "Capitalpay_newbot"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

# Google Sheets
def init_sheet():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds_path = "/etc/secrets/capitalpay-3d03a47fdd18.json"
    creds = ServiceAccountCredentials.from_json_keyfile_name(creds_path, scope)
    client = gspread.authorize(creds)
    sheet = client.open("CapitalPay Leads").sheet1
    return sheet

sheet = init_sheet()

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
class PartnerForm(StatesGroup):
    country = State()
    methods = State()
    geo = State()
    volume = State()
    contact = State()

def back_or_manager():
    return types.InlineKeyboardMarkup(row_width=2).add(
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"),
        types.InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"tg://user?id={MANAGER_ID}")
    )

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(row_width=1).add(
        types.InlineKeyboardButton("ü§ù –°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º", callback_data="connect"),
        types.InlineKeyboardButton("üë®‚Äçüíº –Ø —Ç–∏–º–ª–∏–¥ ü§ó", callback_data="teamlead"),
        types.InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"tg://user?id={MANAGER_ID}")
    )
    banner = types.InputFile("banner.jpg")
    caption = (
        "<b>CapitalPay</b>\n\n"
        "üíº –°–¥–µ–ª–∫–∏ –≤ HighRisk\n"
        "üìä –£—á—ë—Ç, –≤—ã–ø–ª–∞—Ç—ã, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
        "üìö –õ–∏—á–Ω—ã–π –∫—É—Ä–∞—Ç–æ—Ä\n"
        "üí∞ –£—Å–ª–æ–≤–∏—è –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n\n"
        "‚öôÔ∏è –î–µ–ø–æ–∑–∏—Ç ‚Äî –æ—Ç $500\n"
        "üìâ –í—Ö–æ–¥ ‚Äî 8%, –≤—ã—Ö–æ–¥ ‚Äî 2,5%\n"
        "üîÑ –°—Ç–∞–≤–∫–∞ –≤ –∫—Ä—É–≥ ‚Äî 10,5%\n\n"
        "üöÄ 3 –¥–Ω—è –±–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–∞\n"
        "üìÜ –ù–∞ —Ä—ã–Ω–∫–µ —Å 2020\n"
        "üì© @lexcapitalpay"
    )
    await bot.send_photo(message.chat.id, banner, caption=caption, reply_markup=keyboard)

# –¢–∏–º–ª–∏–¥
@dp.callback_query_handler(lambda c: c.data == "teamlead")
async def teamlead_info(callback_query: types.CallbackQuery):
    text = (
        "ü§ù <b>6 –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ CapitalPay –¥–ª—è —Ç–∏–º–ª–∏–¥–æ–≤</b>\n\n"
        "1. –í—ã—Å–æ–∫–∞—è –∞–≥–µ–Ω—Ç—Å–∫–∞—è —Ä–µ—Ñ–∫–∞\n"
        "2. –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n"
        "3. –¢–µ—Å—Ç –±–µ–∑ —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –¥–µ–ø–∞\n"
        "4. –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
        "5. –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ –∑–∞–∫—Ä—ã—Ç—ã–º –ø–ª–æ—â–∞–¥–∫–∞–º\n"
        "6. –ó–∞–ª–∏–≤–∞–µ–º –¥–æ 100–∫–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞\n\n"
        "–•–æ—á–µ—à—å —É—Å–ª–æ–≤–∏—è –∏ —Å–ø–∏—Å–æ–∫ –ø–ª–æ—â–∞–¥–æ–∫? –ñ–º–∏ –∫–Ω–æ–ø–∫—É üëáüèº"
    )
    await bot.send_message(callback_query.from_user.id, text, reply_markup=back_or_manager())

@dp.callback_query_handler(lambda c: c.data == "back")
async def back_to_menu(callback_query: types.CallbackQuery):
    await start(callback_query.message)

# –ê–Ω–∫–µ—Ç–∞
@dp.callback_query_handler(lambda c: c.data == "connect")
async def form_start(callback_query: types.CallbackQuery):
    await callback_query.message.answer("1. –ò–∑ –∫–∞–∫–æ–π –≤—ã —Å—Ç—Ä–∞–Ω—ã?", reply_markup=back_or_manager())
    await PartnerForm.country.set()

@dp.message_handler(state=PartnerForm.country)
async def form_country(message: types.Message, state: FSMContext):
    await state.update_data(country=message.text)
    await message.answer("2. –ö–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏—ë–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã?", reply_markup=back_or_manager())
    await PartnerForm.methods.set()

@dp.message_handler(state=PartnerForm.methods)
async def form_methods(message: types.Message, state: FSMContext):
    await state.update_data(methods=message.text)
    await message.answer("3. –ù–∞ –∫–∞–∫–æ–º –≥–µ–æ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?", reply_markup=back_or_manager())
    await PartnerForm.geo.set()

@dp.message_handler(state=PartnerForm.geo)
async def form_geo(message: types.Message, state: FSMContext):
    await state.update_data(geo=message.text)
    await message.answer("4. –ö–∞–∫–æ–π –æ–±—ä—ë–º –≤ –¥–µ–Ω—å –≥–æ—Ç–æ–≤—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å (USD)?", reply_markup=back_or_manager())
    await PartnerForm.volume.set()

@dp.message_handler(state=PartnerForm.volume)
async def form_volume(message: types.Message, state: FSMContext):
    await state.update_data(volume=message.text)
    await message.answer("5. –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (Telegram –∏–ª–∏ Email):", reply_markup=back_or_manager())
    await PartnerForm.contact.set()

@dp.message_handler(state=PartnerForm.contact)
async def form_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    data = await state.get_data()
    sheet.append_row([
        message.from_user.id,
        data['country'],
        data['methods'],
        data['geo'],
        data['volume'],
        data['contact']
    ])
    await bot.send_message(CHANNEL_ID, f"""
<b>–ù–æ–≤–∞—è –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –∑–∞—è–≤–∫–∞:</b>
–°—Ç—Ä–∞–Ω–∞: {data['country']}
–ú–µ—Ç–æ–¥—ã: {data['methods']}
–ì–µ–æ: {data['geo']}
–û–±—ä—ë–º: {data['volume']}
–ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}
""")
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É.")
    await message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –ø–∞—Ä—Ç–Ω—ë—Ä CapitalPay.")
    await state.finish()

# –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª
@dp.message_handler(commands=["publish"])
async def publish_welcome_post(message: types.Message):
    text = (
        "üöÄ <b>CapitalPay</b> ‚Äî –≤–∞—à –Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä –≤ –º–∏—Ä–µ –≥–µ–º–±–ª–∏–Ω–≥-–ø–ª–∞—Ç–µ–∂–µ–π!\n\n"
        "–ï—Å–ª–∏ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏ –≤ iGaming, –≤—ã –∑–Ω–∞–µ—Ç–µ: –Ω–∞–¥—ë–∂–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ ‚Äî —ç—Ç–æ –∫–∞–∫ —Ç—É–∑ –≤ —Ä—É–∫–∞–≤–µ. CapitalPay –≥–æ—Ç–æ–≤ —Å—Ç–∞—Ç—å –≤–∞—à–∏–º –∫–æ–∑—ã—Ä–µ–º üíº\n\n"
        "üéØ <b>–ü–æ—á–µ–º—É —Ç–æ–ø–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å?</b>\n\n"
        "üí∞ <b>–í—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç–∏–º–ª–∏–¥–æ–≤:</b>\n"
        "‚Ä¢ –°–ø–µ—Ü—Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤\n"
        "‚Ä¢ –ë–æ–Ω—É—Å—ã –∑–∞ –æ–±—ä—ë–º –∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ–¥ –≤–∞—à —Ç—Ä–∞—Ñ–∏–∫\n\n"
        "üíª <b>–°–æ—Ñ—Ç, –∫–æ—Ç–æ—Ä—ã–π —ç–∫–æ–Ω–æ–º–∏—Ç –Ω–µ—Ä–≤—ã:</b>\n"
        "‚Ä¢ –£–¥–æ–±–Ω—ã–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π\n"
        "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è API –∑–∞ 1 –¥–µ–Ω—å\n"
        "‚Ä¢ –ê–≤—Ç–æ–æ—Ç—á—ë—Ç—ã 24/7\n\n"
        "üõ° <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å –æ–ø—ã—Ç–æ–º:</b>\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤ —Ç–µ–º–µ –≥–µ–º–±–ª–∏–Ω–≥–∞\n"
        "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ –ø–æ–º–æ—â—å 24/7\n"
        "‚Ä¢ –†–∞–±–æ—Ç–∞–µ–º —Å KYC, —á–∞—Ä–¥–∂–±—ç–∫–∞–º–∏ –∏ —Ä–∏—Å–∫–∞–º–∏\n\n"
        "üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —á–∞—Ç—É: @CapitalPay_Chat\n"
        "‚¨áÔ∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è!"
    )
    keyboard = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", url="https://t.me/Capitalpay_newbot?start=from_channel")
    )
    await bot.send_message(chat_id=CHANNEL_USERNAME, text=text, reply_markup=keyboard)

# üìå –ú–∏–Ω–∏-–ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π ¬´–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å¬ª
@dp.message_handler(commands=["info"])
async def view_channel_message(message: types.Message):
    text = (
        "‚ÑπÔ∏è <b>–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –≤–∞–∂–Ω–æ–µ!</b>\n\n"
        "–ü—Ä—è–º–æ –Ω–∞–¥ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî —Ü–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏ —Ç–∏–º–ª–∏–¥–æ–≤:\n"
        "‚Ä¢ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ —É—Å–ª–æ–≤–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
        "‚Ä¢ –±—ã—Å—Ç—Ä—ã–µ –≥–∞–π–¥—ã –∏ —Å—Å—ã–ª–∫–∏\n\n"
        "üîº –ü—Ä–æ–ª–∏—Å—Ç–∞–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –≤–≤–µ—Ä—Ö –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
    )
    keyboard = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", url="https://t.me/capital_pay/17")
    )
    await message.answer(text, reply_markup=keyboard)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
