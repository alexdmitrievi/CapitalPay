import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext

API_TOKEN = os.getenv("API_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
MANAGER_ID = 7279978383

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


class PartnerForm(StatesGroup):
    country = State()
    methods = State()
    geo = State()
    volume = State()
    contact = State()


back_button = types.InlineKeyboardMarkup().add(
    types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")
)


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(row_width=1).add(
        types.InlineKeyboardButton("ü§ù –°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º", callback_data="connect"),
        types.InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"tg://user?id={MANAGER_ID}"),
        types.InlineKeyboardButton("üë®‚Äçüíº –Ø —Ç–∏–º–ª–∏–¥ ü§ó", callback_data="teamlead"),
    )

    banner = types.InputFile("banner.jpg")
    caption = (
        "üíº CapitalPay ‚Äî –ø–ª–∞—Ç—ë–∂–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è HighRisk\n"
        "üë• –ü–∞—Ä—Ç–Ω—ë—Ä—ã, —Ç–∏–º–ª–∏–¥—ã, –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫–∏\n"
        "üìä –£—á—ë—Ç, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –≤—ã–ø–ª–∞—Ç—ã\n"
        "üöÄ –ë–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–∞ ‚Äî 3 –¥–Ω—è –Ω–∞ —Ç–µ—Å—Ç"
    )

    await bot.set_chat_menu_button(
        menu_button=types.MenuButtonCommands()
    )

    await bot.send_photo(chat_id=message.chat.id, photo=banner, caption=caption, reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data == "back")
async def back_to_menu(callback_query: types.CallbackQuery):
    await start(callback_query.message)


@dp.callback_query_handler(lambda c: c.data == "connect")
async def form_country(message: types.Message):
    await PartnerForm.country.set()
    await bot.send_message(message.from_user.id, "1. –ò–∑ –∫–∞–∫–æ–π –≤—ã —Å—Ç—Ä–∞–Ω—ã?", reply_markup=back_button)


@dp.message_handler(state=PartnerForm.country)
async def form_methods(message: types.Message, state: FSMContext):
    await state.update_data(country=message.text)
    await message.answer("2. –ö–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏—ë–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã? (C2C, –°–ë–ü, crypto –∏ —Ç.–¥.)", reply_markup=back_button)
    await PartnerForm.methods.set()


@dp.message_handler(state=PartnerForm.methods)
async def form_geo(message: types.Message, state: FSMContext):
    await state.update_data(methods=message.text)
    await message.answer("3. –ù–∞ –∫–∞–∫–æ–µ –≥–µ–æ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?", reply_markup=back_button)
    await PartnerForm.geo.set()


@dp.message_handler(state=PartnerForm.geo)
async def form_volume(message: types.Message, state: FSMContext):
    await state.update_data(geo=message.text)
    await message.answer("4. –ö–∞–∫–æ–π –æ–±—ä—ë–º –≤ –¥–µ–Ω—å –≥–æ—Ç–æ–≤—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å (USD)?", reply_markup=back_button)
    await PartnerForm.volume.set()


@dp.message_handler(state=PartnerForm.volume)
async def form_contact(message: types.Message, state: FSMContext):
    await state.update_data(volume=message.text)
    await message.answer("5. –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (Telegram –∏–ª–∏ Email):", reply_markup=back_button)
    await PartnerForm.contact.set()


@dp.message_handler(state=PartnerForm.contact)
async def form_summary(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    data = await state.get_data()
    summary = (
        f"üì© –ù–æ–≤–∞—è –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –∑–∞—è–≤–∫–∞:\n"
        f"–°—Ç—Ä–∞–Ω–∞: {data['country']}\n"
        f"–ú–µ—Ç–æ–¥—ã: {data['methods']}\n"
        f"–ì–µ–æ: {data['geo']}\n"
        f"–û–±—ä—ë–º: {data['volume']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}"
    )
    await bot.send_message(chat_id=CHANNEL_ID, text=summary)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É.")
    await message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –ø–∞—Ä—Ç–Ω—ë—Ä CapitalPay. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    await state.finish()


@dp.callback_query_handler(lambda c: c.data == "teamlead")
async def teamlead_info(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(row_width=1).add(
        types.InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"tg://user?id={MANAGER_ID}"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")
    )
    await bot.send_message(
        callback_query.from_user.id,
        text=(
            "ü§ù –ù–∞—à–∏ –ø–ª—é—Å—ã –¥–ª—è —Ç–∏–º–ª–∏–¥–æ–≤:\n\n"
            "1. –í—ã—Å–æ–∫–∞—è –∞–≥–µ–Ω—Ç—Å–∫–∞—è —Ä–µ—Ñ–∫–∞\n"
            "2. –í—ã–≤–æ–¥ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è\n"
            "3. –¢–µ—Å—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞ –±–µ–∑ –¥–µ–ø–∞\n"
            "4. –õ–ö —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π\n"
            "5. –ü–æ–¥–∫–ª—é—á–∏–º –∫ –∑–∞–∫—Ä—ã—Ç—ã–º –ü–ü\n"
            "6. –ï—Å—Ç—å –ª–∏–º–∏—Ç—ã > 100–∫–∫ ‚Äî –∑–∞–ª—å—ë–º –∑–∞ —á–∞—Å\n\n"
            "üëáüèº –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–ª–æ—â–∞–¥–æ–∫"
        ),
        reply_markup=keyboard
    )


if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
