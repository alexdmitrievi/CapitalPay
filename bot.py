import os
import logging
import gspread
import json
from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from oauth2client.service_account import ServiceAccountCredentials

API_TOKEN = os.getenv("API_TOKEN")
CHANNEL_ID = -1002316458792
MANAGER_ID = 7279978383
BOT_USERNAME = "Capitalpay_newbot"

if not API_TOKEN:
    raise Exception("API_TOKEN not found in environment variables")

bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

def init_sheet():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds_json = os.getenv("GOOGLE_CREDS_JSON")
    if not creds_json:
        raise Exception("GOOGLE_CREDS_JSON not found in environment variables")
    creds_dict = json.loads(creds_json)
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    client = gspread.authorize(creds)
    return client.open("CapitalPay Leads").sheet1

sheet = init_sheet()

class PartnerForm(StatesGroup):
    country = State()
    methods = State()
    geo = State()
    volume = State()
    contact = State()

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    source = message.get_args() or "direct"
    await dp.storage.set_data(user=message.from_user.id, data={"source": source})

    keyboard = types.InlineKeyboardMarkup(row_width=1).add(
        types.InlineKeyboardButton("ü§ù –°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º", callback_data="connect"),
        types.InlineKeyboardButton("üë®‚Äçüíº –Ø —Ç–∏–º–ª–∏–¥ ü§ó", callback_data="teamlead"),
        types.InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"tg://user?id={MANAGER_ID}")
    )

    caption = (
        "<b>CapitalPay</b>\n\n"
        "üíº –°–¥–µ–ª–∫–∏ –≤ HighRisk\n"
        "üìä –£—á—ë—Ç, –≤—ã–ø–ª–∞—Ç—ã, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
        "üìö –õ–∏—á–Ω—ã–π –∫—É—Ä–∞—Ç–æ—Ä\n"
        "üí∞ –£—Å–ª–æ–≤–∏—è –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n\n"
        "‚öôÔ∏è –î–µ–ø–æ–∑–∏—Ç ‚Äî –æ—Ç $500\n"
        "üìâ –í—Ö–æ–¥ ‚Äî 8%, –≤—ã—Ö–æ–¥ ‚Äî 2,5%\n"
        "üîÑ –°—Ç–∞–≤–∫–∞ –≤ –∫—Ä—É–≥ ‚Äî 10,5%\n\n"
        "üöÄ 3 –¥–Ω—è –±–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–∞\n"
        "üìÜ –ù–∞ —Ä—ã–Ω–∫–µ —Å 2020\n\n"
        "üì© @lexcapitalpay"
    )

    if os.path.exists("banner.jpg"):
        await bot.send_photo(message.chat.id, types.InputFile("banner.jpg"), caption=caption, reply_markup=keyboard)
    else:
        await message.answer(caption, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "teamlead")
async def teamlead_info(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()

    text = (
        "ü§ù <b>6 –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ CapitalPay –¥–ª—è —Ç–∏–º–ª–∏–¥–æ–≤</b>\n\n"
        "1. –í—ã—Å–æ–∫–∞—è –∞–≥–µ–Ω—Ç—Å–∫–∞—è —Ä–µ—Ñ–∫–∞\n"
        "2. –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n"
        "3. –¢–µ—Å—Ç –±–µ–∑ —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –¥–µ–ø–∞\n"
        "4. –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
        "5. –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ –∑–∞–∫—Ä—ã—Ç—ã–º –ø–ª–æ—â–∞–¥–∫–∞–º\n"
        "6. –ó–∞–ª–∏–≤–∞–µ–º –¥–æ 100–∫–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞\n\n"
        "üëáüèº –ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
    )

    keyboard = types.InlineKeyboardMarkup(row_width=1).add(
        types.InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"tg://user?id={MANAGER_ID}"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )

    await bot.send_message(callback_query.from_user.id, text, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "back_to_menu", state="*")
async def back_to_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await start(callback_query.message)

@dp.callback_query_handler(lambda c: c.data == "connect")
async def form_start(callback_query: types.CallbackQuery):
    await PartnerForm.country.set()
    await bot.send_message(callback_query.from_user.id, "1. –ò–∑ –∫–∞–∫–æ–π –≤—ã —Å—Ç—Ä–∞–Ω—ã?",
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"tg://user?id={MANAGER_ID}"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
        ))

@dp.message_handler(state=PartnerForm.country)
async def form_country(message: types.Message, state: FSMContext):
    await state.update_data(country=message.text)
    await PartnerForm.methods.set()
    await message.answer("2. –ö–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏—ë–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã?",
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"tg://user?id={MANAGER_ID}"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
        ))

@dp.message_handler(state=PartnerForm.methods)
async def form_methods(message: types.Message, state: FSMContext):
    await state.update_data(methods=message.text)
    await PartnerForm.geo.set()
    await message.answer("3. –ù–∞ –∫–∞–∫–æ–º –≥–µ–æ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?",
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"tg://user?id={MANAGER_ID}"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
        ))

@dp.message_handler(state=PartnerForm.geo)
async def form_geo(message: types.Message, state: FSMContext):
    await state.update_data(geo=message.text)
    await PartnerForm.volume.set()
    await message.answer("4. –ö–∞–∫–æ–π –æ–±—ä—ë–º –≤ –¥–µ–Ω—å –≥–æ—Ç–æ–≤—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å (USD)?",
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"tg://user?id={MANAGER_ID}"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
        ))

@dp.message_handler(state=PartnerForm.volume)
async def form_volume(message: types.Message, state: FSMContext):
    await state.update_data(volume=message.text)
    await PartnerForm.contact.set()
    await message.answer("5. –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (Telegram –∏–ª–∏ Email):",
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"tg://user?id={MANAGER_ID}"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
        ))

@dp.message_handler(state=PartnerForm.contact)
async def form_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    data = await state.get_data()
    user = message.from_user
    source_data = await dp.storage.get_data(user=user.id)
    source = source_data.get("source", "direct")

    sheet.append_row([
        user.id,
        f"@{user.username}" if user.username else "-",
        source,
        datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')
    ])

    await bot.send_message(MANAGER_ID, f"<b>–ù–æ–≤–∞—è –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –∑–∞—è–≤–∫–∞:</b>\n"
                                       f"–°—Ç—Ä–∞–Ω–∞: {data['country']}\n"
                                       f"–ú–µ—Ç–æ–¥—ã: {data['methods']}\n"
                                       f"–ì–µ–æ: {data['geo']}\n"
                                       f"–û–±—ä—ë–º: {data['volume']}\n"
                                       f"–ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}")

    await message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É.")
    await message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –ø–∞—Ä—Ç–Ω—ë—Ä CapitalPay.")
    await state.finish()

@dp.message_handler(commands=["publish"])
async def publish_post(message: types.Message):
    if str(message.from_user.id) != str(MANAGER_ID):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞.")
        return

    text = (
        "üöÄ <b>CapitalPay</b> ‚Äî –≤–∞—à –Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä –≤ –º–∏—Ä–µ –≥–µ–º–±–ª–∏–Ω–≥-–ø–ª–∞—Ç–µ–∂–µ–π!\n\n"
        "üéØ <b>–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å?</b>\n"
        "üí∞ –í—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç–∏–º–ª–∏–¥–æ–≤\n"
        "üíª –°–æ—Ñ—Ç —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ API\n"
        "üõ° –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å –æ–ø—ã—Ç–æ–º –≤ –≥–µ–º–±–ª–∏–Ω–≥–µ\n\n"
        "üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —á–∞—Ç—É: @CapitalPay_Chat\n"
        "‚¨áÔ∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è!"
    )

    keyboard = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", url=f"https://t.me/{BOT_USERNAME}?start=from_channel")
    )

    await bot.send_message(chat_id=CHANNEL_ID, text=text, reply_markup=keyboard)

@dp.message_handler(commands=["info"])
async def info_post(message: types.Message):
    text = (
        "‚ÑπÔ∏è –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–¥ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–º –ø–æ—Å—Ç–æ–º:\n\n"
        "‚Ä¢ –£—Å–ª–æ–≤–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥\n"
        "‚Ä¢ –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å\n"
        "‚Ä¢ –û–±–∑–æ—Ä –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã\n\n"
        "üëÄ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –ø—Ä–æ–ª–∏—Å—Ç–∞–π –≤–≤–µ—Ä—Ö"
    )
    keyboard = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", url="https://t.me/capital_pay/17")
    )
    await bot.send_message(chat_id=CHANNEL_ID, text=text, reply_markup=keyboard)

async def on_startup(dp):
    await bot.set_my_commands([
        types.BotCommand("start", "üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"),
    ])

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
