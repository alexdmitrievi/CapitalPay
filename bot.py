import os
import datetime
import gspread
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from oauth2client.service_account import ServiceAccountCredentials

API_TOKEN = os.getenv("API_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
MANAGER_ID = 7279978383
CHANNEL_USERNAME = "@capital_pay"
BOT_USERNAME = "CapitalPay_bot"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

def init_sheet():
    scope = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive.file",
        "https://www.googleapis.com/auth/drive"
    ]
    creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
    client = gspread.authorize(creds)
    sheet = client.open("CapitalPay Leads").sheet1
    return sheet

sheet = init_sheet()

class PartnerForm(StatesGroup):
    country = State()
    methods = State()
    geo = State()
    volume = State()
    contact = State()

def step_keyboard():
    return types.InlineKeyboardMarkup(row_width=1).add(
        types.InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"tg://user?id={MANAGER_ID}"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")
    )

@dp.message_handler(commands=["start"])
async def start(message: types.Message, state: FSMContext):
    await state.finish()
    args = message.get_args()
    username = message.from_user.username or "‚Äî"
    date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
    sheet.append_row([str(message.from_user.id), f"@{username}", args, date])

    banner = types.InputFile("banner.jpg")
    caption = (
        "<b>CapitalPay</b> ‚Äî –ø–ª–∞—Ç—ë–∂–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è HighRisk

"
        "üíº –°–¥–µ–ª–∫–∏ –≤ HighRisk
"
        "üìä –£—á—ë—Ç, –≤—ã–ø–ª–∞—Ç—ã, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
"
        "üìö –õ–∏—á–Ω—ã–π –∫—É—Ä–∞—Ç–æ—Ä
"
        "üí∞ –£—Å–ª–æ–≤–∏—è –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥

"
        "‚öôÔ∏è –î–µ–ø–æ–∑–∏—Ç ‚Äî –æ—Ç $500
"
        "üìâ –í—Ö–æ–¥ ‚Äî 8%, –≤—ã—Ö–æ–¥ ‚Äî 2,5%
"
        "üîÑ –°—Ç–∞–≤–∫–∞ –≤ –∫—Ä—É–≥ ‚Äî 10,5%

"
        "üöÄ 3 –¥–Ω—è –±–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–∞
"
        "üìÜ –ù–∞ —Ä—ã–Ω–∫–µ —Å 2020
"
        "üì© @lexcapitalpay"
    )

    keyboard = types.InlineKeyboardMarkup(row_width=1).add(
        types.InlineKeyboardButton("üë®‚Äçüíº –Ø —Ç–∏–º–ª–∏–¥ ü§ó", callback_data="teamlead"),
        types.InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"tg://user?id={MANAGER_ID}")
    )

    await bot.send_photo(chat_id=message.chat.id, photo=banner, caption=caption, parse_mode='HTML', reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "teamlead")
async def teamlead_info(callback_query: types.CallbackQuery):
    text = (
        "ü§ù <b>6 –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ CapitalPay –¥–ª—è —Ç–∏–º–ª–∏–¥–æ–≤</b>

"
        "1. –í—ã—Å–æ–∫–∞—è –∞–≥–µ–Ω—Ç—Å–∫–∞—è —Ä–µ—Ñ–∫–∞
"
        "2. –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
"
        "3. –¢–µ—Å—Ç –±–µ–∑ —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –¥–µ–ø–∞
"
        "4. –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
"
        "5. –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ –∑–∞–∫—Ä—ã—Ç—ã–º –ø–ª–æ—â–∞–¥–∫–∞–º
"
        "6. –ó–∞–ª–∏–≤–∞–µ–º –¥–æ 100–∫–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞

"
        "–•–æ—á–µ—à—å —É—Å–ª–æ–≤–∏—è –∏ —Å–ø–∏—Å–æ–∫ –ø–ª–æ—â–∞–¥–æ–∫? –ñ–º–∏ –∫–Ω–æ–ø–∫—É üëáüèº"
    )
    keyboard = types.InlineKeyboardMarkup(row_width=1).add(
        types.InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"tg://user?id={MANAGER_ID}"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")
    )
    await bot.send_message(callback_query.from_user.id, text, parse_mode="HTML", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "connect")
async def form_start(callback_query: types.CallbackQuery):
    await PartnerForm.country.set()
    await bot.send_message(callback_query.from_user.id, "1. –ò–∑ –∫–∞–∫–æ–π –≤—ã —Å—Ç—Ä–∞–Ω—ã?", reply_markup=step_keyboard())

@dp.message_handler(state=PartnerForm.country)
async def form_country(message: types.Message, state: FSMContext):
    await state.update_data(country=message.text)
    await PartnerForm.methods.set()
    await message.answer("2. –ö–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏—ë–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã? (C2C, –°–ë–ü, –∫—Ä–∏–ø—Ç–∞ –∏ —Ç.–¥.)", reply_markup=step_keyboard())

@dp.message_handler(state=PartnerForm.methods)
async def form_methods(message: types.Message, state: FSMContext):
    await state.update_data(methods=message.text)
    await PartnerForm.geo.set()
    await message.answer("3. –ù–∞ –∫–∞–∫–∏–µ –≥–µ–æ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?", reply_markup=step_keyboard())

@dp.message_handler(state=PartnerForm.geo)
async def form_geo(message: types.Message, state: FSMContext):
    await state.update_data(geo=message.text)
    await PartnerForm.volume.set()
    await message.answer("4. –ö–∞–∫–æ–π –æ–±—ä—ë–º –≤ –¥–µ–Ω—å –≥–æ—Ç–æ–≤—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å (USD)?", reply_markup=step_keyboard())

@dp.message_handler(state=PartnerForm.volume)
async def form_volume(message: types.Message, state: FSMContext):
    await state.update_data(volume=message.text)
    await PartnerForm.contact.set()
    await message.answer("5. –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (Telegram –∏–ª–∏ Email):", reply_markup=step_keyboard())

@dp.message_handler(state=PartnerForm.contact)
async def form_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    data = await state.get_data()
    summary = (
        f"üì© –ù–æ–≤–∞—è –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –∑–∞—è–≤–∫–∞:
"
        f"üåç –°—Ç—Ä–∞–Ω–∞: {data['country']}
"
        f"üí≥ –ú–µ—Ç–æ–¥—ã: {data['methods']}
"
        f"üìç –ì–µ–æ: {data['geo']}
"
        f"üìà –û–±—ä—ë–º: {data['volume']}
"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}"
    )
    await bot.send_message(chat_id=CHANNEL_ID, text=summary)
    await message.answer("üéâ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "back")
async def back(callback_query: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == PartnerForm.methods.state:
        await PartnerForm.country.set()
        await bot.send_message(callback_query.from_user.id, "1. –ò–∑ –∫–∞–∫–æ–π –≤—ã —Å—Ç—Ä–∞–Ω—ã?", reply_markup=step_keyboard())
    elif current_state == PartnerForm.geo.state:
        await PartnerForm.methods.set()
        await bot.send_message(callback_query.from_user.id, "2. –ö–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏—ë–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã?", reply_markup=step_keyboard())
    elif current_state == PartnerForm.volume.state:
        await PartnerForm.geo.set()
        await bot.send_message(callback_query.from_user.id, "3. –ù–∞ –∫–∞–∫–∏–µ –≥–µ–æ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?", reply_markup=step_keyboard())
    elif current_state == PartnerForm.contact.state:
        await PartnerForm.volume.set()
        await bot.send_message(callback_query.from_user.id, "4. –ö–∞–∫–æ–π –æ–±—ä—ë–º –≤ –¥–µ–Ω—å –≥–æ—Ç–æ–≤—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å?", reply_markup=step_keyboard())
    else:
        await state.finish()
        await start(callback_query.message, state)

@dp.message_handler(commands=["post_button"])
async def post_button(message: types.Message):
    if message.from_user.id != MANAGER_ID:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    text = (
        "üöÄ –•–æ—á–µ—à—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ CapitalPay?
"
        "–ü–ª–∞—Ç—ë–∂–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è HighRisk: –≥–µ–º–±–ª–∏–Ω–≥, –±–µ—Ç—Ç–∏–Ω–≥, –¥–µ–π—Ç–∏–Ω–≥.

"
        "üõ† –°—Ç–∞—Ä—Ç –±–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–∞
"
        "üìä –£—á—ë—Ç –∏ –∫–∞–±–∏–Ω–µ—Ç –ø–æ–¥ –∫–æ–º–∞–Ω–¥—É
"
        "‚ö°Ô∏è –í—ã–ø–ª–∞—Ç—ã 24/7"
    )

    keyboard = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", url=f"https://t.me/{BOT_USERNAME}?start=from_channel")
    )

    await bot.send_message(chat_id=CHANNEL_USERNAME, text=text, reply_markup=keyboard)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)