import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text

API_TOKEN = os.getenv("API_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
MANAGER_ID = 7279978383

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

class PartnerForm(StatesGroup):
    country = State()
    methods = State()
    geo = State()
    volume = State()
    contact = State()

def manager_buttons(include_back=True):
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(types.InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"tg://user?id={MANAGER_ID}"))
    if include_back:
        kb.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    return kb

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(row_width=1).add(
        types.InlineKeyboardButton("ü§ù –°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º", callback_data="connect"),
        types.InlineKeyboardButton("üë®‚Äçüíº –Ø —Ç–∏–º–ª–∏–¥ ü§ó", callback_data="teamlead"),
        types.InlineKeyboardButton("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="restart"),
    )
    banner = types.InputFile("banner.jpg")
    caption = (
        "<b>CapitalPay</b>\n\n"
        "üíº –°–¥–µ–ª–∫–∏ –≤ HighRisk\n"
        "üìä –£—á—ë—Ç, –≤—ã–ø–ª–∞—Ç—ã, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
        "üìö –õ–∏—á–Ω—ã–π –∫—É—Ä–∞—Ç–æ—Ä\n"
        "üí∞ –£—Å–ª–æ–≤–∏—è –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n\n"
        "‚öôÔ∏è –î–µ–ø–æ–∑–∏—Ç ‚Äî –æ—Ç $500\n"
        "üìâ –í—Ö–æ–¥ ‚Äî 8%, –≤—ã—Ö–æ–¥ ‚Äî 2,5%\n"
        "üîÑ –°—Ç–∞–≤–∫–∞ –≤ –∫—Ä—É–≥ ‚Äî 10,5%\n\n"
        "üöÄ 3 –¥–Ω—è –±–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–∞\n"
        "üìÜ –ù–∞ —Ä—ã–Ω–∫–µ —Å 2020\n"
        "üì© @lexcapitalpay"
    )
    await bot.send_photo(chat_id=message.chat.id, photo=banner, caption=caption, parse_mode='HTML', reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "connect")
async def form_start(callback_query: types.CallbackQuery):
    await PartnerForm.country.set()
    await callback_query.message.answer("1. –ò–∑ –∫–∞–∫–æ–π –≤—ã —Å—Ç—Ä–∞–Ω—ã?", reply_markup=manager_buttons())

@dp.message_handler(state=PartnerForm.country)
async def form_country(message: types.Message, state: FSMContext):
    await state.update_data(country=message.text)
    await PartnerForm.methods.set()
    await message.answer("2. –ö–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏—ë–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã?", reply_markup=manager_buttons())

@dp.message_handler(state=PartnerForm.methods)
async def form_methods(message: types.Message, state: FSMContext):
    await state.update_data(methods=message.text)
    await PartnerForm.geo.set()
    await message.answer("3. –ù–∞ –∫–∞–∫–æ–µ –≥–µ–æ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?", reply_markup=manager_buttons())

@dp.message_handler(state=PartnerForm.geo)
async def form_geo(message: types.Message, state: FSMContext):
    await state.update_data(geo=message.text)
    await PartnerForm.volume.set()
    await message.answer("4. –ö–∞–∫–æ–π –æ–±—ä—ë–º –≤ –¥–µ–Ω—å –≥–æ—Ç–æ–≤—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å?", reply_markup=manager_buttons())

@dp.message_handler(state=PartnerForm.volume)
async def form_volume(message: types.Message, state: FSMContext):
    await state.update_data(volume=message.text)
    await PartnerForm.contact.set()
    await message.answer("5. –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (Telegram –∏–ª–∏ Email):", reply_markup=manager_buttons())

@dp.message_handler(state=PartnerForm.contact)
async def form_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    data = await state.get_data()
    summary = f"""
<b>–ù–æ–≤–∞—è –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –∑–∞—è–≤–∫–∞:</b>

–°—Ç—Ä–∞–Ω–∞: {data['country']}
–ú–µ—Ç–æ–¥—ã: {data['methods']}
–ì–µ–æ: {data['geo']}
–û–±—ä—ë–º: {data['volume']}
–ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}
"""
    await bot.send_message(chat_id=CHANNEL_ID, text=summary, parse_mode="HTML")
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É.")
    await message.answer("üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –ø–∞—Ä—Ç–Ω—ë—Ä CapitalPay. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    await state.finish()

@dp.callback_query_handler(Text(equals="back"), state=PartnerForm.methods)
async def back_to_country(callback: types.CallbackQuery):
    await PartnerForm.country.set()
    await callback.message.answer("1. –ò–∑ –∫–∞–∫–æ–π –≤—ã —Å—Ç—Ä–∞–Ω—ã?", reply_markup=manager_buttons())

@dp.callback_query_handler(Text(equals="back"), state=PartnerForm.geo)
async def back_to_methods(callback: types.CallbackQuery):
    await PartnerForm.methods.set()
    await callback.message.answer("2. –ö–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏—ë–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã?", reply_markup=manager_buttons())

@dp.callback_query_handler(Text(equals="back"), state=PartnerForm.volume)
async def back_to_geo(callback: types.CallbackQuery):
    await PartnerForm.geo.set()
    await callback.message.answer("3. –ù–∞ –∫–∞–∫–æ–µ –≥–µ–æ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?", reply_markup=manager_buttons())

@dp.callback_query_handler(Text(equals="back"), state=PartnerForm.contact)
async def back_to_volume(callback: types.CallbackQuery):
    await PartnerForm.volume.set()
    await callback.message.answer("4. –ö–∞–∫–æ–π –æ–±—ä—ë–º –≤ –¥–µ–Ω—å –≥–æ—Ç–æ–≤—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å?", reply_markup=manager_buttons())

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
